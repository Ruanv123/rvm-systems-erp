generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  ADMIN
  USER
}

enum TipoPessoa {
  FISICA
  JURIDICA
}

enum StatusPedido {
  PENDENTE
  PROCESSANDO
  COMPLETO
  CANCELADO
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  //chaves estrangeiras
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id])
  permissionsId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model Modules {
  id Int @id @default(autoincrement())

  name        String
  description String
  route       String

  //chave estrangeira 
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id])
  permissionsId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permissions {
  id Int @id @default(autoincrement())

  name String

  users   User[]
  modules Modules[]
}

model Fornecedor {
  id Int @id @default(autoincrement())

  razao_social  String
  nome_fantasia String
  tipo_pessoa   TipoPessoa @default(FISICA)
  cnpj          String?
  cpf           String?
  endereco      String
  cep           String
  telefone      String
  email         String     @unique
  site          String?

  produtos Produto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cliente {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  telefone String

  // chaves estrangeiras
  endereco   Endereco? @relation(fields: [enderecoId], references: [id])
  enderecoId Int?
  orders     Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Endereco {
  id           Int       @id @default(autoincrement())
  rua          String
  cidade       String
  estado       String
  codigoPostal String
  pais         String
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @updatedAt
  Cliente      Cliente[]
}

model Produto {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  barCode     String
  costPrice   Float
  buyPrice    Float
  sellPrice   Float
  quantity    Int

  // chaves estrangeiras
  Fornecedor   Fornecedor? @relation(fields: [fornecedorId], references: [id])
  fornecedorId Int?
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Order {
  id        Int       @id @default(autoincrement())
  
  total Float
  status StatusPedido

  //chaves estrangeiras
  Cliente   Cliente?  @relation(fields: [clienteId], references: [id])
  clienteId Int?
  produtos  Produto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FormaDePagamento {
  id          Int       @id @default(autoincrement())
  nome        String    @unique
  descricao   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}