generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  permissionsId         Int?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  Permissions           Permissions?           @relation(fields: [permissionsId], references: [id])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Modules {
  id            Int          @id @default(autoincrement())
  name          String
  description   String
  route         String
  permissionsId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id])
}

model Permissions {
  id      Int       @id @default(autoincrement())
  name    String
  Modules Modules[]
  User    User[]
}

model Fornecedor {
  id            Int        @id @default(autoincrement())
  razao_social  String
  nome_fantasia String
  tipo_pessoa   TipoPessoa @default(FISICA)
  cnpj          String?
  cpf           String?
  endereco      String
  cep           String
  telefone      String
  email         String     @unique
  site          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  produtos      Produto[]
}

model Cliente {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  telefone   String
  enderecoId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  endereco   Endereco? @relation(fields: [enderecoId], references: [id])
  orders     Order[]
}

model Endereco {
  id           Int       @id @default(autoincrement())
  rua          String
  cidade       String
  estado       String
  codigoPostal String
  pais         String
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @updatedAt
  Cliente      Cliente[]
}

model Produto {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  barCode      String
  costPrice    Float
  buyPrice     Float
  sellPrice    Float
  quantity     Int
  fornecedorId Int?
  orderId      Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Fornecedor Fornecedor? @relation(fields: [fornecedorId], references: [id])
  Order      Order?      @relation(fields: [orderId], references: [id])
}

model Order {
  id        Int          @id @default(autoincrement())
  total     Float
  status    StatusPedido
  clienteId Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Cliente   Cliente?     @relation(fields: [clienteId], references: [id])
  produtos  Produto[]
}

model FormaDePagamento {
  id        Int      @id @default(autoincrement())
  nome      String   @unique
  descricao String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

enum TipoPessoa {
  FISICA
  JURIDICA
}

enum StatusPedido {
  PENDENTE
  PROCESSANDO
  COMPLETO
  CANCELADO
}
